import { error } from "@sveltejs/kit";
import { verifyRegistrationResponse } from "@simplewebauthn/server";
import type { AuthenticatorDevice, RegistrationResponseJSON } from "@simplewebauthn/typescript-types";
import type { RequestHandler } from "./$types";
import { rpID, origin as rpOrigin } from "$lib/relying-party";
import { getUser, updateUser } from "$lib/users";
import { isoUint8Array } from "@simplewebauthn/server/helpers";

// Verification happens after a user's device generations a registration response
// generated by the user's device. This is the second and final
// step in registering a user.

export const POST: RequestHandler = async (event) => {
  const body: RegistrationResponseJSON = await event.request.json();
  const user = await getUser(event.params.username);

  if (!user) {
    throw error(400, "user does not exist");
  }

  const { currentChallenge } = user;

  if (!currentChallenge) {
    throw error(400, "user has no challenge to compare against");
  }

  const { verified, registrationInfo } = await verifyRegistrationResponse({
    response: body,
    expectedChallenge: currentChallenge,
    expectedOrigin: rpOrigin, // this can be multiple origins, just pass in an array
    expectedRPID: rpID, // this can also be an array
  });

  if (verified && registrationInfo) {
    const { credentialPublicKey, credentialID, counter } = registrationInfo;

    // Check to see if the user has already authenticated with their current device
    const existingDevice = user.devices.find((device) => {
      isoUint8Array.areEqual(device.credentialID, credentialID);
    });

    if (!existingDevice) {
      const newDevice: AuthenticatorDevice = {
        credentialPublicKey,
        credentialID,
        counter,
        transports: body.response.transports,
      };
      user.devices.push(newDevice);
      await updateUser(user);
    }
  }

  return new Response(JSON.stringify({ verified }), {
    headers: {
      "content-type": "application/json",
    },
  });
};
